#! /usr/bin/env python

PACKAGE='rb_tracker'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#       Name       					Type      	Level 	Description     			    				Default 	Min   	Max
gen.add("pub_rb_poses_with_cov", 			bool_t,		0,    	"Publishing RB poses with covariance.",					False)
gen.add("pub_clustered_pc", 				bool_t,		0,    	"Publishing tracked features clustered in RBs",				True)
gen.add("pub_tf", 					bool_t,		0,    	"Publishing RB poses as frames in TF.",					True)
gen.add("print_rb_poses", 				bool_t,		0,    	"Printing the tracked poses in terminal.",				True)
gen.add("min_feats_new_rb",					int_t,		0,	"Minimum number of moving features to create a new RB",			20,		0,	100)
gen.add("min_feats_survive_rb",					int_t,		0,	"Minimum number of supporting features to not remove an existing RB",			10,		0,	100)


constraints_enum = 	gen.enum([ gen.const("NoConstraint", int_t, 0, "Cam motion is not constrained"),
                  	gen.const("RollPitchConstrained", int_t, 1, "Cam rotation in roll and pitch is not allowed"),
                  	gen.const("RollPitchZConstrained", int_t, 2, "Cam rotation in roll and pitch and translation in z is not allowed"),
                  	gen.const("TranslationConstrained", int_t, 3, "Cam translation is not allowed"),
			gen.const("TranslationRollYawConstrained", int_t, 4, "Cam translation and rotation in roll and yaw is not allowed"),
		  	gen.const("RotationConstrained", int_t, 5, "Cam rotation is not allowed"),
		  	gen.const("FullConstrained", int_t, 6, "Cam motion is not allowed"),
			gen.const("RobotXYPlaneBaselink", int_t, 7, "Cam motion is not allowed") ],
                  	"An enum with the posible cam motion constraints")
gen.add("cam_motion_constraint", 			int_t, 		0, 	"Motion constraints imposed to the camera motion estimated with VO.", 	6, 		0, 	7, edit_method=constraints_enum)

exit(gen.generate(PACKAGE, "rb_tracker", "RBTrackerDynReconf"))
